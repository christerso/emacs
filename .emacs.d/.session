;;; Automatically generated on Mon Feb 20 14:38:03 2017
;;; Invoked by christer@LabLinux using 24.5.1
(setq-default kill-ring '(#(";;; ary:" 0 4 (fontified t face font-lock-comment-delimiter-face) 4 8 (fontified t face font-lock-comment-face)) "https://github.com/Wilfred/ag.el/#agel"))
(setq-default session-file-alist '(("~/.emacs" 859 950 1 nil nil 983 (overwrite-mode)) ("~/.emacs_workgroups" 1 nil 1 nil nil 1 (overwrite-mode)) ("~/.emacs.d/elpa/helm-ag-20170209.745/helm-ag-autoloads.el" 910 nil 1 nil nil 910 (overwrite-mode)) ("~/.emacs.d/elpa/ag-20161228.1641/ag-autoloads.el" 3029 nil 1 nil nil 3029 (overwrite-mode)) ("~/projects/neuronet/src/network.cpp" 1 nil 1 nil t nil (overwrite-mode)) ("~/.emacs.d/elpa/workgroups2-20141102.1122/workgroups2-autoloads.el" 801 nil 1 nil nil 801 (overwrite-mode)) ("~/.emacs.d/elpa/workgroups-20110726.941/workgroups-autoloads.el" 234 nil 1 nil nil 234 (overwrite-mode)) ("~/.emacs.d/elpa/desktop+-20170107.1332/desktop+-autoloads.el" 1818 nil 1 nil nil 1818 (overwrite-mode)) ("~/projects/neuronet/src/network.h" 767 nil 1 nil nil 1 (overwrite-mode)) ("~/.emacs.d/elpa/f3-20160628.1601/f3-autoloads.el" 557 nil 1 nil nil 557 (overwrite-mode)) ("~/.emacs.d/elpa/realgud-20170218.740/realgud-autoloads.el" 815 nil 1 nil nil 815 (overwrite-mode)) ("~/.emacs.d/elpa/persp-fr-20161226.1241/persp-fr-autoloads.el" 557 nil 1 nil nil 557 (overwrite-mode)) ("~/.emacs.d/elpa/persp-mode-20170123.1056/persp-mode-autoloads.el" 1656 nil 1 nil nil 1656 (overwrite-mode)) ("~/.emacs.d/elpa/perspective-20160609.1444/perspective-autoloads.el" 997 nil 1 nil nil 997 (overwrite-mode)) ("~/.emacs.d/.emacs_workgroups" 44 nil 1 nil nil 44 (overwrite-mode)) ("~/projects/neuronet/src/neuron.h" 563 1430 1 nil nil 1430 (overwrite-mode)) ("~/projects/neuronet/src/neuron.cpp" 716 nil 1 nil nil 716 (overwrite-mode))))
(setq-default file-name-history '("~/.emacs" "~/.emacs_workgroups" "~/projects/neuronet/src/spdlog/fmt/bundled/format.h" "~/.emacs.d/elpa/helm-ag-20170209.745/helm-ag-autoloads.el" "~/.emacs.d/elpa/ag-20161228.1641/ag-autoloads.el" "~/projects/neuronet/src/neuron.cpp" "~/projects/neuronet/src/neuron.h" "~/projects/neuronet/src/network.cpp" "~/.emacs.d/elpa/workgroups2-20141102.1122/workgroups2-autoloads.el" "~/.emacs.d/elpa/workgroups-20110726.941/workgroups-autoloads.el" "~/projects/neuronet/src/main.cpp" "~/Dropbox/emacs/.emacs" "~/Dropbox/emacs/elisp/workgroups/README.md" "~/Dropbox/emacs/elisp/workgroups/workgroups.el" "~/tmp/elisp/.emacs" "~/.emacs.d/elpa/session-20120510.1700/session-autoloads.el" "~/.emacs.d/.emacs_workgroups" "~/.emacs.d/elpa/anaphora-20140728.1536/anaphora-autoloads.el" "~/.emacs.d/elpa/f-20161002.800/f-autoloads.el" "~/.emacs.d/elpa/s-20160928.636/s-autoloads.el" "/usr/include/c++/6/bits/stl_vector.h" "/usr/include/c++/6/bits/vector.tcc" "~/projects/neuronet/src/network.h" "~/.emacs.d/bookmarks" "~/projects/neuronet/gtest/googlemock/test/gmock-actions_test.cc" "~/projects/goeuro/src/busroute.cpp" "~/.emacs.d/elpa/ggtags-20161022.251/ggtags-autoloads.el" "~/.emacs.d/elpa/yasnippet-20170216.1928/yasnippet-autoloads.el" "~/projects/neuronet/build/compile_commands.json" "~/projects/neuronet/build/CMakeCache.txt"))
(setq-default search-ring '("workgroup" "yes" "kill" "bookmarkqq" "bookmark" "bm" "helm-ag" "search"))
(setq-default buffer-name-history '(".emacs_workgroups" "*scratch*" "format.h" "network.cpp" ".emacs" "*Messages*" "*Compile-Log*" "neuron.h" "network.h" "CMakeLists.txt" "neuron.cpp"))
(setq-default command-history '((eval-region (region-beginning) (region-end)) (execute-extended-command nil "eval-region") (package-list-packages nil) (execute-extended-command nil "package-list-packages") (switch-to-buffer ".emacs") (kill-buffer ".emacs_workgroups") (switch-to-buffer ".emacs_workgroups") (switch-to-buffer "*scratch*") (kill-buffer "format.h") (helm-ag) (execute-extended-command nil "helm-ag") (ag "test" "/home/christer/projects/neuronet/") (execute-extended-command nil "ag") (ag "--project Neuron" "/home/christer/projects/neuronet/src/spdlog/fmt/bundled/") (ag "test" "/home/christer/projects/neuronet/src/") (switch-to-buffer "neuron.cpp") (switch-to-buffer "neuron.h") (session-save-session 1) (execute-extended-command nil "session-save-session") (desktop-read) (execute-extended-command nil "desktop-read") (wg-reload-session) (execute-extended-command nil "wg-reload-session") (switch-to-buffer "network.cpp") (wg-save "/home/christer/.emacs.d/workgroups/session.el") (execute-extended-command nil "wg-save") (wg-create-workgroup "Home" nil) (execute-extended-command nil "wg-create-workgroup") (wg-load-default) (execute-extended-command nil "wg-load-default") (wg-save-default) (execute-extended-command nil "wg-save-default") (execute-extended-command nil "wg-load") (switch-to-buffer "*Messages*") (workgroups-mode (quote toggle)) (execute-extended-command nil "workgroups-mode") (dired "/home/christer/.emacs.d/") (find-file "/home/christer/.emacs.d/workgroups/session.el") (execute-extended-command nil "wg-switch-to-workgroup") (wg-save "/home/christer/.elisp.d/workgroups/session.el") (switch-to-buffer "network.h") (wg-create-workgroup "Main") (desktop+-load-auto) (execute-extended-command nil "desktop+-load-auto") (desktop+-load "Home") (execute-extended-command nil "desktop+-load") (desktop+-create "Home") (execute-extended-command nil "desktop+-create") (find-file "/home/christer/.emacs") (dired "/home/christer/")))
(setq-default extended-command-history '("eval-region" "package-list-packages" "helm-ag" "ag" "session-save-session" "desktop-read" "wg-reload-session" "wg-save" "wg-create-workgroup" "wg-load-default" "wg-save-default" "wg-load" "workgroups-mode" "wg-switch-to-workgroup" "desktop+-load-auto" "desktop+-load" "desktop+-create" "f3" "byte-recompile-directory" "session-toggle-permanent-flag" "session-initialize" "wg-switch-right" "wg-switch-left" "customize-apropos" "persp-add-new" "persp-prev" "persp-next" "customize-variable" "persp-rename" "persp-kill" "persp-remove-buffer" "persp-add-buffer" "persp-mode" "wg-save-session" "wg-rename-workgroup" "wg-update-all-workgroups" "desktop-save" "wg-toggle-morph"))
(setq-default helm-ag--command-history '("test"))
(setq-default helm-ff-history '("/home/christer/projects/neuronet/src/" "/home/christer/projects/neuronet/src/spdlog/fmt/bundled/" "/home/christer/.elisp.d/" "/home/christer/" "/home/christer/.emacs.d/"))
(setq-default helm-source-complex-command-history '((name . "Complex Command History") (candidates closure (t) nil (let* \.\.\. \.\.\. \.\.\.)) (keymap keymap \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. keymap \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\.) (action ("Eval" closure \.\.\. \.\.\. \.\.\. \.\.\. \.\.\.) ("Edit and eval" closure \.\.\. \.\.\. \.\.\.)) (persistent-action . helm-sexp-eval) (multiline) (filtered-candidate-transformer helm-fuzzy-highlight-matches) (match helm-mm-exact-match helm-mm-match) (redisplay . identity) (header-line . "C-j: helm-sexp-eval (keeping session)") (multimatch)))
(setq-default helm-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (keymap keymap \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. keymap \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\.) (action . helm-type-file-actions) (persistent-action . ignore) (filtered-candidate-transformer helm-file-name-history-transformer helm-fuzzy-highlight-matches) (match helm-mm-exact-match helm-mm-match) (redisplay . identity) (header-line . "C-j: ignore (keeping session)") (multimatch)))
(setq-default ido-buffer-history '(#(".emacs" 0 6 (face ido-virtual)) #(".emacs_workgroups" 0 17 (face ido-virtual)) "*scratch*" "format.h" #("neuron.cpp" 0 10 (face ido-virtual)) #("neuron.h" 0 8 (face ido-virtual)) "network.cpp" ".emacs" #("network.cpp" 0 11 (face ido-virtual)) "*Messages*" #("network.h" 0 9 (face ido-virtual)) "*Compile-Log*" "network.h" #("CMakeLists.txt" 0 14 (face ido-virtual)) "neuron.h" #("main.cpp" 0 8 (face ido-virtual)) "CMakeLists.txt" ".emacs_workgroups"))
(setq-default ido-file-history '("." "session.el" ".emacs"))
(setq-default minibuffer-history '("/home/christer/projects/neuronet/src/" "test" "/home/christer/projects/neuronet/src/spdlog/fmt/bundled/" "--project Neuron" "Home" "/home/christer/.elisp.d/" "/home/christer/.elisp.d/workgroups/session.el" "Main" "ne" "/home/christer/.emacs.d/" "persp" "Other" "persp-nil-name" "Misc" "none" ".emacs" "wg" "Start" "/home/christer/" "workgroups" "wg-"))
(setq-default occur-collect-regexp-history '("\\1"))
(setq-default table-capture-columns-history '(""))
(setq-default table-capture-justify-history '("left"))
(setq-default table-capture-min-cell-width-history '("5"))
(setq-default table-cell-height-history '("1"))
(setq-default table-cell-span-direction-history '("right"))
(setq-default table-cell-split-contents-to-history '("split"))
(setq-default table-cell-split-orientation-history '("horizontally"))
(setq-default table-cell-width-history '("5"))
(setq-default table-col-delim-regexp-history '(""))
(setq-default table-columns-history '("3"))
(setq-default table-insert-row-column-history '("row"))
(setq-default table-justify-history '("center"))
(setq-default table-row-delim-regexp-history '(""))
(setq-default table-rows-history '("3"))
(setq-default table-sequence-count-history '("0"))
(setq-default table-sequence-increment-history '("1"))
(setq-default table-sequence-interval-history '("1"))
(setq-default table-sequence-justify-history '("left"))
(setq-default table-sequence-string-history '("0"))
(setq-default table-source-caption-history '("Table"))
(setq-default table-source-language-history '("html"))
(setq-default table-target-history '("cell"))
(setq-default yes-or-no-p-history '("yes"))
