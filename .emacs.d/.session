;;; Automatically generated on Sat Feb 25 15:27:25 2017
;;; Invoked by christer@Labbox using 24.5.1
(setq-default kill-ring '(" (require 'eyedropper)" "(require 'font-lock+)
" #("(require 'facemenu+)
" 0 1 (fontified t) 1 8 (face font-lock-keyword-face fontified t) 8 10 (fontified t) 10 19 (face font-lock-constant-face fontified t) 19 20 (fontified t) 20 21 (rear-nonsticky t fontified t)) "   (require 'facemenu+)
" #("    parser.add_help" 0 4 (fontified t) 4 19 (fontified t)) #("    m_log.flush_on(int log_level)" 0 4 (fontified t) 4 10 (fontified t) 10 18 (fontified t) 18 19 (fontified t) 19 22 (face font-lock-type-face fontified t) 22 23 (fontified t) 23 32 (face font-lock-variable-name-face fontified t) 32 33 (fontified t))))
(setq-default session-file-alist '(("~/.emacs" 3770 3770 1 nil nil 3770 (overwrite-mode)) ("~/.emacs.d/elpa/eyedropper-20170221.1640/eyedropper-autoloads.el" 2900 nil 1 nil nil 2900 (overwrite-mode)) ("~/.emacs.d/elpa/hexrgb-20170223.738/hexrgb-autoloads.el" 7184 nil 1 nil nil 7184 (overwrite-mode)) ("~/projects/Home24/home24.py" 1774 1720 1 nil nil 1979 (overwrite-mode)) ("/storage/projects/neuronet/src/network.cpp" 663 663 1 nil nil 663 (overwrite-mode)) ("~/.emacs.d/elpa/font-lock+-20170222.1755/font-lock+-autoloads.el" 234 nil 1 nil nil 234 (overwrite-mode)) ("~/.emacs.d/elpa/facemenu+-20170222.1744/facemenu+-autoloads.el" 5554 nil 1 nil nil 5554 (overwrite-mode)) ("~/.emacs.d/elpa/company-anaconda-20160809.705/company-anaconda-autoloads.el" 510 nil 1 nil nil 510 (overwrite-mode)) ("~/.emacs.d/elpa/anaconda-mode-20170214.556/anaconda-mode-autoloads.el" 599 nil 1 nil nil 599 (overwrite-mode)) ("~/.emacs.d/elpa/pythonic-20160221.1123/pythonic-autoloads.el" 482 nil 1 nil nil 482 (overwrite-mode)) ("~/projects/Home24/home24-test-data.json" 105122 185 1 nil nil 105122 (overwrite-mode)) ("~/projects/home24/Home24/CMakeLists.txt" 97 nil 1 nil nil 97 (overwrite-mode)) ("~/.emacs.d/elpa/cmake-mode-20160928.505/cmake-mode-autoloads.el" 1478 nil 1 nil nil 1478 (overwrite-mode)) ("~/.emacs.d/elpa/json-mode-20160803.1606/json-mode-autoloads.el" 702 nil 1 nil nil 702 (overwrite-mode)) ("~/.emacs.d/elpa/json-reformat-20160212.53/json-reformat-autoloads.el" 566 nil 1 nil nil 566 (overwrite-mode)) ("~/.emacs.d/elpa/json-snatcher-20150511.2047/json-snatcher-autoloads.el" 443 nil 1 nil nil 443 (overwrite-mode)) ("~/.emacs.d/elpa/flymake-json-20130423.2357/flymake-json-autoloads.el" 562 nil 1 nil nil 562 (overwrite-mode)) ("~/.emacs.d/elpa/flymake-easy-20140818.55/flymake-easy-autoloads.el" 245 nil 1 nil nil 245 (overwrite-mode)) ("~/.offlineimaprc" 55 255 1 nil nil 55 (overwrite-mode)) ("~/projects/playback-cpp-coding-challenge-master/player.cpp" 1541 813 1 nil nil 818 (overwrite-mode)) ("/storage/projects/neuronet/src/neuron.h" 887 nil 1 nil nil 887 (overwrite-mode)) ("~/.emacs.d/elpa/sr-speedbar-20161025.131/sr-speedbar-autoloads.el" 702 nil 1 nil nil 702 (overwrite-mode)) ("~/.emacs.d/lisp/sourcepair.el" 5226 5184 1 nil nil 5226 (overwrite-mode)) ("~/projects/playback-cpp-coding-challenge-master/fileSink.cpp" 3290 1 1 nil nil 4627 (overwrite-mode)) ("~/Maildir/[Gmail].Drafts/cur/1487787893.95be2e0444cfe054.labbox:2,DS" 45 282 1 nil nil 233 (overwrite-mode)) ("~/.mutt/muttrc" 40 nil 1 nil nil 40 (overwrite-mode)) ("~/.emacs.d/lisp/mu/mu4e/mu4e.el" 2462 nil 1 nil nil 1 (overwrite-mode)) ("~/.emacs.d/elpa/notmuch-20170127.1808/notmuch-autoloads.el" 4159 nil 1 nil nil 4159 (overwrite-mode)) ("~/.emacs.d/elpa/ag-readme.txt" 99 62 1 nil nil 99 (overwrite-mode)) ("~/.emacs.d/elpa/twilight-theme-20120412.603/twilight-theme-autoloads.el" 431 nil 1 nil nil 431 (overwrite-mode)) ("~/projects/playback-cpp-coding-challenge-master/fileSink.h" 1463 1092 1 nil nil 1092 (overwrite-mode)) ("~/private.el" 1 1 1 nil nil 33 (overwrite-mode)) ("~/projects/neuronet/src/network.cpp" 1983 1985 1 nil t 4587 (overwrite-mode)) ("~/projects/neuronet/src/neuron.h" 1165 960 1 nil nil 951 (overwrite-mode)) ("~/projects/neuronet/src/neuron.cpp" 747 1 1 nil nil 4224 (overwrite-mode)) ("~/projects/neuronet/src/network.h" 995 1 1 nil nil 1382 (overwrite-mode)) ("~/projects/neuronet/src/neuralapi.h" 381 1 1 nil nil 381 (overwrite-mode)) ("~/projects/neuronet/src/test.h" 1 1 1 nil nil 266 (overwrite-mode)) ("~/projects/neuronet/qt/inc/mainwindow.h" 272 272 1 nil nil 272 (overwrite-mode)) ("~/projects/neuronet/src/main.cpp" 1413 1 1 nil nil 1372 (overwrite-mode)) ("~/projects/neuronet/qt/src/mainwindow.cpp" 65 153 1 nil nil 153 (overwrite-mode)) ("~/projects/neuronet/src/CMakeLists.txt" 395 615 1 nil nil 106 (overwrite-mode)) ("~/projects/neuronet/CMakeLists.txt" 1 207 1 nil nil 252 (overwrite-mode)) ("~/.emacs_workgroups" 1 nil 1 nil nil 1 (overwrite-mode)) ("~/.emacs.d/elpa/helm-ag-20170209.745/helm-ag-autoloads.el" 910 nil 1 nil nil 910 (overwrite-mode)) ("~/.emacs.d/elpa/ag-20161228.1641/ag-autoloads.el" 3029 nil 1 nil nil 3029 (overwrite-mode)) ("~/.emacs.d/elpa/workgroups2-20141102.1122/workgroups2-autoloads.el" 801 nil 1 nil nil 801 (overwrite-mode)) ("~/.emacs.d/elpa/workgroups-20110726.941/workgroups-autoloads.el" 234 nil 1 nil nil 234 (overwrite-mode)) ("~/.emacs.d/elpa/desktop+-20170107.1332/desktop+-autoloads.el" 1818 nil 1 nil nil 1818 (overwrite-mode)) ("~/.emacs.d/elpa/f3-20160628.1601/f3-autoloads.el" 557 nil 1 nil nil 557 (overwrite-mode)) ("~/.emacs.d/elpa/realgud-20170218.740/realgud-autoloads.el" 815 nil 1 nil nil 815 (overwrite-mode)) ("~/.emacs.d/elpa/persp-fr-20161226.1241/persp-fr-autoloads.el" 557 nil 1 nil nil 557 (overwrite-mode)) ("~/.emacs.d/elpa/persp-mode-20170123.1056/persp-mode-autoloads.el" 1656 nil 1 nil nil 1656 (overwrite-mode)) ("~/.emacs.d/elpa/perspective-20160609.1444/perspective-autoloads.el" 997 nil 1 nil nil 997 (overwrite-mode)) ("~/.emacs.d/.emacs_workgroups" 44 nil 1 nil nil 44 (overwrite-mode))))
(setq-default file-name-history '("~/.emacs" "~/.emacs.d/elpa/eyedropper-20170221.1640/eyedropper-autoloads.el" "~/.emacs.d/elpa/hexrgb-20170223.738/hexrgb-autoloads.el" "~/.emacs.d/elpa/font-lock+-20170222.1755/font-lock+-autoloads.el" "~/.emacs.d/elpa/facemenu+-20170222.1744/facemenu+-autoloads.el" "~/projects/playback-cpp-coding-challenge-master/main.cpp" "/usr/local/share/doc/mu/NEWS.org" "~/.emacs.d/lisp/sourcepair.el" "/usr/local/share/doc/mu/mu4e-about.org" "~/projects/neuronet/CMakeLists.txt" "~/.offlineimaprc" "~/projects/Home24/articles.py" "~/projects/playback-cpp-coding-challenge-master/mixer.cpp" "~/projects/Home24/home24.py" "~/.emacs.d/elpa/company-anaconda-20160809.705/company-anaconda-autoloads.el" "~/projects/playback-cpp-coding-challenge-master/mixer.h" "/home/christer/.emacs" "~/.emacs.d/elpa/anaconda-mode-20170214.556/anaconda-mode-autoloads.el" "~/.emacs.d/elpa/pythonic-20160221.1123/pythonic-autoloads.el" "~/projects/Home24/home24-test-data.json" "~/projects/home24/Home24/CMakeLists.txt" "~/.emacs.d/elpa/cmake-mode-20160928.505/cmake-mode-autoloads.el" "~/projects/home24/Home24/articleparser.h" "~/projects/home24/Home24/articleparser.cpp" "~/projects/playback-cpp-coding-challenge-master/mixersource.cpp" "~/projects/playback-cpp-coding-challenge-master/fileReader.cpp" "~/projects/playback-cpp-coding-challenge-master/fileReader.h" "/../storage/projects/neuronet/src/network.cpp" "/../storage/projects/neuronet/src/neuron.cpp" "/../storage/projects/neuronet/src/network.h" "/../storage/projects/Home24/home24-test-data.json" "~/.emacs.d/elpa/json-mode-20160803.1606/json-mode-autoloads.el" "~/.emacs.d/elpa/json-reformat-20160212.53/json-reformat-autoloads.el" "~/.emacs.d/elpa/json-snatcher-20150511.2047/json-snatcher-autoloads.el" "~/.emacs.d/elpa/flymake-json-20130423.2357/flymake-json-autoloads.el" "~/.emacs.d/elpa/flymake-easy-20140818.55/flymake-easy-autoloads.el" "~/projects/playback-cpp-coding-challenge-master/player.cpp" "/home/christer/.offlineimaprc"))
(setq-default search-ring '("eyedro" "font-lock" "facemenu" "company" "anaconda" "home" "projects" "speed" "s" "python" "att-k" "tab" "project" "cmake" "mak" "json"))
(setq-default bookmark-history '("RTags_0" "RTags_1" "RTags_2"))
(setq-default buffer-name-history '(".emacs" "home24.py" "network.cpp" "*anaconda-mode*" ".emacs.d" "*scratch*"))
(setq-default command-history '((find-file "~/.emacs" t) (package-list-packages nil) (execute-extended-command nil "package-list-packages") (switch-to-buffer ".emacs") (switch-to-buffer "home24.py") (switch-to-buffer "network.cpp") (anaconda-mode-complete) (execute-extended-command nil "anaconda-mode-complete") (kill-buffer "*anaconda-mode*") (dired "/home/christer/") (toggle-read-only nil t) (execute-extended-command nil "toggle-read-only") (lisp-mode) (execute-extended-command nil "lisp-mode")))
(setq-default compile-history '("nn" "cmake --build /home/christer/projects/neuronet/bin/" "cmake --build /home/christer/projects/neuronet/" "cmake --build /home/christer/projects/neuronet/build/" " ninja" " make -j10" "cd ~/projects/neuronet/build/&& make -j10" "make -k "))
(setq-default extended-command-history '("package-list-packages" "anaconda-mode-complete" "toggle-read-only" "lisp-mode" "speedbar-mode" "eval-region" "circe" "notmuch" "cmake-ide-compile" "customize-apropos" "compile" "customize-face" "customize-apropos-faces" "sr-speedbar-open" "sr-speedbar-close" "speedbar" "mu4e-mark-unmark-all" "mu4e" "cmake-project-mode" "gnus-summary-sort-by-date" "gnus" "customize-group" "load-library" "set-variable" "shell"))
(setq-default face-name-history '("mode-line"))
(setq-default find-tag-history '(""))
(setq-default gud-gdb-history '("gdb -i=mi "))
(setq-default gud-gud-gdb-history '("gdb --fullname /home/christer/projects/neuronet/build/src/neuronet" "gdb --fullname build/src/neuronet" "gdb --fullname ../build/src/neuronet" "gdb --fullname src/neuronet" "gdb --fullname "))
(setq-default helm-ag--command-history '("test"))
(setq-default helm-ff-history '("/../storage/projects/neuronet/src/" "/home/christer/" "/home/christer/.mutt/" "/home/christer/.emacs.d/elpa/" "/home/christer/projects/neuronet/src/" "/home/christer/projects/neuronet/" "/home/christer/projects/neuronet/src/spdlog/fmt/bundled/" "/home/christer/.elisp.d/" "/home/christer/.emacs.d/"))
(setq-default helm-source-complex-command-history '((name . "Complex Command History") (candidates closure (t) nil (let* \.\.\. \.\.\. \.\.\.)) (keymap keymap \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. keymap \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\.) (action ("Eval" closure \.\.\. \.\.\. \.\.\. \.\.\. \.\.\.) ("Edit and eval" closure \.\.\. \.\.\. \.\.\.)) (persistent-action . helm-sexp-eval) (multiline) (filtered-candidate-transformer helm-fuzzy-highlight-matches) (match helm-mm-exact-match helm-mm-match) (redisplay . identity) (header-line . "C-j: helm-sexp-eval (keeping session)") (multimatch)))
(setq-default helm-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (keymap keymap \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. keymap \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\.) (action . helm-type-file-actions) (persistent-action . ignore) (filtered-candidate-transformer helm-file-name-history-transformer helm-fuzzy-highlight-matches) (match helm-mm-exact-match helm-mm-match) (redisplay . identity) (header-line . "C-j: ignore (keeping session)") (multimatch)))
(setq-default ido-buffer-history '(".emacs" "home24.py" "network.cpp" "*anaconda-mode*" "home24-test-data.json" "CMakeLists.txt<Home24>" "articleparser.cpp" "#ubuntu" ".offlineimaprc" " *mu4e-update*" "*notmuch-hello*" "neuron.h" "mixer.cpp" "player.cpp" "mainwindow.cpp" "*RTags Log*" #(".emacs" 0 6 (face ido-virtual)) ".emacs.d" "network.h" "*Messages*" "*draft*" "*unsent mail*" #("sourcepair.el" 0 13 (face ido-virtual)) "fileSink.cpp" "mu4e.el" "muttrc" #(".offlineimaprc" 0 14 (face ido-virtual))))
(setq-default ido-file-history '("." ".emacs" ".offlineimaprc" "private.el" "test.h" "neuralapi.h" "neuralnet.log" "mainwindow.h" "mainwindow.cpp" "main.cpp" "CMakeLists.txt" "session.el"))
(setq-default minibuffer-history '(#("<+>" 0 3 (speedbar-token "Ludeon Studios" speedbar-function speedbar-dired help-echo dframe-help-echo speedbar-text "<+>" invisible nil mouse-face speedbar-highlight-face face speedbar-button-face)) "Freenode" "q"))
(setq-default notmuch-search-history '("SoundCloud"))
(setq-default notmuch-select-tag-history '("flagged"))
(setq-default occur-collect-regexp-history '("\\1"))
(setq-default read-expression-history '("wq"))
(setq-default table-capture-columns-history '(""))
(setq-default table-capture-justify-history '("left"))
(setq-default table-capture-min-cell-width-history '("5"))
(setq-default table-cell-height-history '("1"))
(setq-default table-cell-span-direction-history '("right"))
(setq-default table-cell-split-contents-to-history '("split"))
(setq-default table-cell-split-orientation-history '("horizontally"))
(setq-default table-cell-width-history '("5"))
(setq-default table-col-delim-regexp-history '(""))
(setq-default table-columns-history '("3"))
(setq-default table-insert-row-column-history '("row"))
(setq-default table-justify-history '("center"))
(setq-default table-row-delim-regexp-history '(""))
(setq-default table-rows-history '("3"))
(setq-default table-sequence-count-history '("0"))
(setq-default table-sequence-increment-history '("1"))
(setq-default table-sequence-interval-history '("1"))
(setq-default table-sequence-justify-history '("left"))
(setq-default table-sequence-string-history '("0"))
(setq-default table-source-caption-history '("Table"))
(setq-default table-source-language-history '("html"))
(setq-default table-target-history '("cell"))
(setq-default yes-or-no-p-history '("yes"))
