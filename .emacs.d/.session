;;; Automatically generated on Tue Feb 21 01:29:15 2017
;;; Invoked by christer@LabLinux using 24.5.1
(setq-default session-file-alist '(("~/projects/neuronet/src/network.cpp" 1983 1985 1 nil t 4587 (overwrite-mode)) ("~/projects/neuronet/src/neuron.h" 1165 960 1 nil nil 951 (overwrite-mode)) ("~/projects/neuronet/src/neuron.cpp" 747 1 1 nil nil 4224 (overwrite-mode)) ("~/projects/neuronet/src/network.h" 995 1 1 nil nil 1382 (overwrite-mode)) ("~/.emacs" 985 985 1 nil nil 1158 (overwrite-mode)) ("~/projects/neuronet/src/neuralapi.h" 381 1 1 nil nil 381 (overwrite-mode)) ("~/projects/neuronet/src/test.h" 1 1 1 nil nil 266 (overwrite-mode)) ("~/.emacs.d/lisp/sourcepair.el" 5879 5882 1 nil nil 5879 (overwrite-mode)) ("~/projects/neuronet/qt/inc/mainwindow.h" 272 272 1 nil nil 272 (overwrite-mode)) ("~/projects/neuronet/src/main.cpp" 1413 1 1 nil nil 1372 (overwrite-mode)) ("~/projects/neuronet/qt/src/mainwindow.cpp" 65 153 1 nil nil 153 (overwrite-mode)) ("~/projects/neuronet/src/CMakeLists.txt" 395 615 1 nil nil 106 (overwrite-mode)) ("~/projects/neuronet/CMakeLists.txt" 1 207 1 nil nil 252 (overwrite-mode)) ("~/.emacs_workgroups" 1 nil 1 nil nil 1 (overwrite-mode)) ("~/.emacs.d/elpa/helm-ag-20170209.745/helm-ag-autoloads.el" 910 nil 1 nil nil 910 (overwrite-mode)) ("~/.emacs.d/elpa/ag-20161228.1641/ag-autoloads.el" 3029 nil 1 nil nil 3029 (overwrite-mode)) ("~/.emacs.d/elpa/workgroups2-20141102.1122/workgroups2-autoloads.el" 801 nil 1 nil nil 801 (overwrite-mode)) ("~/.emacs.d/elpa/workgroups-20110726.941/workgroups-autoloads.el" 234 nil 1 nil nil 234 (overwrite-mode)) ("~/.emacs.d/elpa/desktop+-20170107.1332/desktop+-autoloads.el" 1818 nil 1 nil nil 1818 (overwrite-mode)) ("~/.emacs.d/elpa/f3-20160628.1601/f3-autoloads.el" 557 nil 1 nil nil 557 (overwrite-mode)) ("~/.emacs.d/elpa/realgud-20170218.740/realgud-autoloads.el" 815 nil 1 nil nil 815 (overwrite-mode)) ("~/.emacs.d/elpa/persp-fr-20161226.1241/persp-fr-autoloads.el" 557 nil 1 nil nil 557 (overwrite-mode)) ("~/.emacs.d/elpa/persp-mode-20170123.1056/persp-mode-autoloads.el" 1656 nil 1 nil nil 1656 (overwrite-mode)) ("~/.emacs.d/elpa/perspective-20160609.1444/perspective-autoloads.el" 997 nil 1 nil nil 997 (overwrite-mode)) ("~/.emacs.d/.emacs_workgroups" 44 nil 1 nil nil 44 (overwrite-mode))))
(setq-default file-name-history '("~/.emacs.d/bookmarks" "~/projects/neuronet/CMakeLists.txt" "~/projects/neuronet/src/CMakeLists.txt" "~/projects/neuronet/src/neuralnet.log" "~/.emacs.d/lisp/sourcepair.el" "~/.emacs" "~/projects/neuronet/src/neuron.cpp" "~/projects/neuronet/src/neuron.h" "~/projects/neuronet/src/main.cpp" "~/projects/neuronet/qt/src/mainwindow.cpp" "~/projects/neuronet/qt/inc/mainwindow.h" "~/projects/neuronet/src/network.h" "~/projects/neuronet/src/neuralapi.h" "/home/christer/projects/neuronet/src/test.h" "/home/christer/projects/neuronet/src/neuralapi.h" "/home/christer/projects/neuronet/src/neuralnet.log" "~/projects/neuronet/src/network.cpp" "~/projects/neuronet/qt/inc/ui_mainwindow.h" "/home/christer/projects/neuronet/qt-src/mainwindow.h" "/home/christer/projects/neuronet/qt-src/mainwindow.cpp" "/home/christer/projects/neuronet/src/main.cpp" "/home/christer/projects/neuronet/CMakeLists.txt" "/home/christer/projects/neuronet/src/CMakeLists.txt" "~/.emacs_workgroups" "~/projects/neuronet/src/spdlog/fmt/bundled/format.h" "~/.emacs.d/elpa/helm-ag-20170209.745/helm-ag-autoloads.el" "~/.emacs.d/elpa/ag-20161228.1641/ag-autoloads.el" "~/.emacs.d/elpa/workgroups2-20141102.1122/workgroups2-autoloads.el" "~/.emacs.d/elpa/workgroups-20110726.941/workgroups-autoloads.el" "~/Dropbox/emacs/.emacs" "~/Dropbox/emacs/elisp/workgroups/README.md" "~/Dropbox/emacs/elisp/workgroups/workgroups.el" "~/tmp/elisp/.emacs" "~/.emacs.d/elpa/session-20120510.1700/session-autoloads.el" "~/.emacs.d/.emacs_workgroups" "~/.emacs.d/elpa/anaphora-20140728.1536/anaphora-autoloads.el" "~/.emacs.d/elpa/f-20161002.800/f-autoloads.el" "~/.emacs.d/elpa/s-20160928.636/s-autoloads.el" "/usr/include/c++/6/bits/stl_vector.h" "/usr/include/c++/6/bits/vector.tcc" "~/projects/neuronet/gtest/googlemock/test/gmock-actions_test.cc" "~/projects/goeuro/src/busroute.cpp" "~/.emacs.d/elpa/ggtags-20161022.251/ggtags-autoloads.el" "~/.emacs.d/elpa/yasnippet-20170216.1928/yasnippet-autoloads.el" "~/projects/neuronet/build/compile_commands.json" "~/projects/neuronet/build/CMakeCache.txt"))
(setq-default search-ring '("et" "yasni" "header" ".emacs" "proje" "compile" "QT4" "workgroup" "yes" "kill" "bookmarkqq" "bookmark" "bm" "helm-ag" "search"))
(setq-default bookmark-history '("RTags_0" "RTags_1"))
(setq-default buffer-name-history '("neuron.cpp" "network.h" "CMakeLists.txt<src>" ".emacs" ".emacs.d" "network.cpp" "*RTags Log*" "test.h" "neuralapi.h" "mainwindow.cpp" "src<qt>" "*gud*" "*gud-neuronet*" "sourcepair.el" "mainwindow.h" "*shell*" "main.cpp" "CMakeLists.txt<neuronet>" "ui_mainwindow.h" ".emacs_workgroups" "*scratch*" "format.h" "*Messages*" "*Compile-Log*" "neuron.h" "CMakeLists.txt"))
(setq-default command-history '((switch-to-buffer "neuron.cpp") (compile "nn" nil) (execute-extended-command nil "compile") (compile "cmake --build /home/christer/projects/neuronet/bin/" nil) (switch-to-buffer "network.h") (switch-to-buffer "CMakeLists.txt<src>") (execute-extended-command nil "set-variable") (eval-region (region-beginning) (region-end)) (execute-extended-command nil "eval-region") (switch-to-buffer ".emacs") (switch-to-buffer ".emacs.d") (package-list-packages nil) (execute-extended-command nil "package-list-packages") (dired "/home/christer/projects/neuronet/src/") (switch-to-buffer "network.cpp") (switch-to-buffer "*RTags Log*") (kill-buffer "test.h") (auto-insert) (execute-extended-command nil "auto-insert") (switch-to-buffer "test.h") (switch-to-buffer "neuralapi.h") (find-file "/home/christer/projects/neuronet/src/test.h") (yas-insert-snippet nil) (execute-extended-command nil "yas-insert-snippet") (find-file "/home/christer/projects/neuronet/src/neuralapi.h") (find-file "/home/christer/projects/neuronet/src/neuralnet.log") (switch-to-buffer "mainwindow.cpp") (switch-to-buffer "sourcepair.el") (dired "/home/christer/projects/neuronet/qt/inc/") (dired "/home/christer/projects/neuronet/qt/src/") (switch-to-buffer "src<qt>") (kill-buffer "*gud*") (kill-buffer "*gud-neuronet*") (debug) (execute-extended-command nil "debug") (gud-gdb "gdb --fullname /home/christer/projects/neuronet/build/src/neuronet") (execute-extended-command nil "gud-gdb") (gud-gdb "gdb --fullname build/src/neuronet") (gud-gdb "gdb --fullname ../build/src/neuronet") (gud-gdb "gdb --fullname src/neuronet") (gud-gdb "gdb --fullname ") (execute-extended-command nil "cd") (gdb "gdb -i=mi ") (execute-extended-command nil "gdb") (kill-buffer "sourcepair.el") (switch-to-buffer "mainwindow.h") (compile "cmake --build /home/christer/projects/neuronet/" nil) (compile "cmake --build /home/christer/projects/neuronet/build/" nil) (kill-buffer "*RTags Log*")))
(setq-default compile-history '("nn" "cmake --build /home/christer/projects/neuronet/bin/" "cmake --build /home/christer/projects/neuronet/" "cmake --build /home/christer/projects/neuronet/build/" " ninja" " make -j10" "cd ~/projects/neuronet/build/&& make -j10" "make -k "))
(setq-default extended-command-history '("compile" "set-variable" "eval-region" "package-list-packages" "auto-insert" "yas-insert-snippet" "debug" "gud-gdb" "cd" "gdb" "shell" "helm-ag" "ag" "session-save-session" "desktop-read" "wg-reload-session" "wg-save" "wg-create-workgroup" "wg-load-default" "wg-save-default" "wg-load" "workgroups-mode" "wg-switch-to-workgroup" "desktop+-load-auto" "desktop+-load" "desktop+-create" "f3" "byte-recompile-directory" "session-toggle-permanent-flag" "session-initialize" "wg-switch-right" "wg-switch-left" "customize-apropos" "persp-add-new" "persp-prev" "persp-next" "customize-variable" "persp-rename" "persp-kill" "persp-remove-buffer" "persp-add-buffer" "persp-mode" "wg-save-session" "wg-rename-workgroup" "wg-update-all-workgroups" "desktop-save" "wg-toggle-morph"))
(setq-default gud-gdb-history '("gdb -i=mi "))
(setq-default gud-gud-gdb-history '("gdb --fullname /home/christer/projects/neuronet/build/src/neuronet" "gdb --fullname build/src/neuronet" "gdb --fullname ../build/src/neuronet" "gdb --fullname src/neuronet" "gdb --fullname "))
(setq-default helm-ag--command-history '("test"))
(setq-default helm-ff-history '("/home/christer/projects/neuronet/src/" "/home/christer/projects/neuronet/" "/home/christer/projects/neuronet/src/spdlog/fmt/bundled/" "/home/christer/.elisp.d/" "/home/christer/" "/home/christer/.emacs.d/"))
(setq-default helm-source-complex-command-history '((name . "Complex Command History") (candidates closure (t) nil (let* \.\.\. \.\.\. \.\.\.)) (keymap keymap \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. keymap \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\.) (action ("Eval" closure \.\.\. \.\.\. \.\.\. \.\.\. \.\.\.) ("Edit and eval" closure \.\.\. \.\.\. \.\.\.)) (persistent-action . helm-sexp-eval) (multiline) (filtered-candidate-transformer helm-fuzzy-highlight-matches) (match helm-mm-exact-match helm-mm-match) (redisplay . identity) (header-line . "C-j: helm-sexp-eval (keeping session)") (multimatch)))
(setq-default helm-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (keymap keymap \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. keymap \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\. \.\.\.) (action . helm-type-file-actions) (persistent-action . ignore) (filtered-candidate-transformer helm-file-name-history-transformer helm-fuzzy-highlight-matches) (match helm-mm-exact-match helm-mm-match) (redisplay . identity) (header-line . "C-j: ignore (keeping session)") (multimatch)))
(setq-default ido-buffer-history '("neuron.cpp" "network.h" "CMakeLists.txt<src>" ".emacs" ".emacs.d" "network.cpp" "*RTags Log*" "test.h" "neuralapi.h" #(".emacs" 0 6 (face ido-virtual)) "mainwindow.cpp" #("sourcepair.el" 0 13 (face ido-virtual)) "src<qt>" "*gud*" "*gud-neuronet*" "mainwindow.h" "sourcepair.el" "*shell*" "main.cpp" "CMakeLists.txt<neuronet>" "ui_mainwindow.h" #("neuron.cpp" 0 10 (face ido-virtual)) #(".emacs_workgroups" 0 17 (face ido-virtual)) "*scratch*" "format.h" #("neuron.h" 0 8 (face ido-virtual)) #("network.cpp" 0 11 (face ido-virtual)) "*Messages*" #("network.h" 0 9 (face ido-virtual)) "*Compile-Log*" #("CMakeLists.txt" 0 14 (face ido-virtual)) "neuron.h" #("main.cpp" 0 8 (face ido-virtual)) "CMakeLists.txt" ".emacs_workgroups"))
(setq-default ido-file-history '("." "test.h" "neuralapi.h" "neuralnet.log" "mainwindow.h" "mainwindow.cpp" "main.cpp" "CMakeLists.txt" "session.el" ".emacs"))
(setq-default minibuffer-history '("4" "**********************************" #("Connection" 0 10 (fontified t)) "" "/home/ch" "neu" "/home/christer/projects/neuronet/build" "/projects/neu" "CM" #("cmake_minimum_required" 0 22 (fontified t face font-lock-function-name-face)) "/home/christer/projects/neuronet/qt-src" "/home/christer/projects/neuronet/qt" "/home/christer/projects/neuronet/src/" "test" "/home/christer/projects/neuronet/src/spdlog/fmt/bundled/" "--project Neuron" "Home" "/home/christer/.elisp.d/" "/home/christer/.elisp.d/workgroups/session.el" "Main" "ne" "/home/christer/.emacs.d/" "persp" "Other" "persp-nil-name" "Misc" "none" ".emacs" "wg" "Start" "/home/christer/" "workgroups" "wg-"))
(setq-default occur-collect-regexp-history '("\\1"))
(setq-default table-capture-columns-history '(""))
(setq-default table-capture-justify-history '("left"))
(setq-default table-capture-min-cell-width-history '("5"))
(setq-default table-cell-height-history '("1"))
(setq-default table-cell-span-direction-history '("right"))
(setq-default table-cell-split-contents-to-history '("split"))
(setq-default table-cell-split-orientation-history '("horizontally"))
(setq-default table-cell-width-history '("5"))
(setq-default table-col-delim-regexp-history '(""))
(setq-default table-columns-history '("3"))
(setq-default table-insert-row-column-history '("row"))
(setq-default table-justify-history '("center"))
(setq-default table-row-delim-regexp-history '(""))
(setq-default table-rows-history '("3"))
(setq-default table-sequence-count-history '("0"))
(setq-default table-sequence-increment-history '("1"))
(setq-default table-sequence-interval-history '("1"))
(setq-default table-sequence-justify-history '("left"))
(setq-default table-sequence-string-history '("0"))
(setq-default table-source-caption-history '("Table"))
(setq-default table-source-language-history '("html"))
(setq-default table-target-history '("cell"))
(setq-default yes-or-no-p-history '("yes"))
